#!/usr/bin/env python

import sys
import os
from copy import deepcopy

try:
    import PyQt4
    import PyQt4.QtCore as QtCore
    import PyQt4.QtGui as QtGui
    from PyQt4.QtGui import QMainWindow as QMainWindow
    from PyQt4.QtGui import QApplication 
except:
    import PyQt5
    import PyQt5.QtCore as QtCore
    import PyQt5.QtGui as QtGui
    from PyQt5.QtWidgets import QMainWindow as QMainWindow
    from PyQt5.QtWidgets import QApplication

import ibeatles.interfaces.ui_mainWindow

from ibeatles.step1.data_handler import DataHandler
from ibeatles.step1.gui_handler import Step1GuiHandler
from ibeatles.step1.time_spectra_handler import TimeSpectraHandler
from ibeatles.step1.plot import Step1Plot

from ibeatles.step2.gui_handler import Step2GuiHandler
from ibeatles.step2.roi_handler import Step2RoiHandler
from ibeatles.step2.plot import Step2Plot

from ibeatles.step3.gui_handler import Step3GuiHandler

from ibeatles.utilities.retrieve_data_infos import RetrieveSelectedFileDataInfos, RetrieveGeneralFileInfos
from ibeatles.utilities.list_data_handler import ListDataHandler
from ibeatles.utilities.roi_editor import RoiEditor
from ibeatles.utilities.bragg_edge_selection_handler import BraggEdgeSelectionHandler
from ibeatles.utilities.gui_handler import GuiHandler


class MainWindow(QMainWindow, ibeatles.interfaces.ui_mainWindow.Ui_MainWindow):
    """ Main FastGR window
    """

    DEBUGGING = True
    current_data_type = 'sample'
    cbar = None
    live_data = []
    roi_editor_ui = {'sample': None,
                     'ob': None,
                     'normalized': None}
    
    # [['label', 'x0', 'y0', 'width', 'height', 'group'], ...]
    init_array = ['label_roi', '0', '0', '1', '1', '0']

    # [[use?, x0, y0, width, height, mean_counts]]
    init_array_normalization = [True, 0, 0, 1, 1, -1]

    # list roi ui id (when multiple roi in plots)
    list_roi_id = {'sample': [],
                   'ob': [],
                   'normalization': [],
                   'normalized': []}
    
    list_label_roi_id = {'sample': [],
                         'ob': [],
                         'normalized' : []}
    
    list_bragg_edge_selection_id = {'sample': None,
                                    'ob': None,
                                    'normalized': None}
    
    list_roi = {'sample': [init_array],
                'ob': [init_array],
                'normalization': [deepcopy(init_array_normalization)],
                'normalized': [init_array]}
    
    old_list_roi = {'sample': [init_array],
                    'ob': [init_array],
                    'normalized': [init_array]}
    
    list_file_selected = {'sample': [],
                      'ob': [],
                      'normalized': []}
    
    current_bragg_edge_x_axis = {'sample': [],
                                 'ob': [],
                                 'normalized': []}
    
    step2_ui = {'area': None,
                'image_view': None,
                'roi': None,
                'bragg_edge_plot': None,
                'normalized_profile_plot': None,
                'caxis': None}
    
                              
    def __init__(self):
        """ Initialization
        Parameters
        ----------
        """
        # Base class
        QMainWindow.__init__(self)

        # Initialize the UI widgets
        self.ui = ibeatles.interfaces.ui_mainWindow.Ui_MainWindow()
        self.ui.setupUi(self)

        self.setup()
        self.init_interface()
     
    def init_interface(self):
        o_gui = Step1GuiHandler(parent = self)
        o_gui.init_gui()
        o_gui.init_labels()
        o_gui.init_material_widgets()
        o_gui.init_statusbar()
        o_gui.init_pyqtgraph()
        self.update_delta_lambda()   
        
        o_gui_2 = Step2GuiHandler(parent = self)
        o_gui_2.init_pyqtgraph()
        o_gui_2.init_table()
        
    def setup(self):
        if self.DEBUGGING:
            import socket
            if socket.gethostname() == 'mac95470':
                current_folder = '/Users/j35/data/ibeatles_data/'
            else:
                current_folder = '/Volumes/my_book_thunderbolt_duo/iBeatles/test_data/'
        else:
            current_folder = os.getcwd()

        self.sample_folder = current_folder
        self.ob_folder = current_folder
        self.normalized_folder = current_folder
        self.time_spectra_folder = current_folder
    
        self.data_metadata = {'sample': {'title': "Select folder or list of files",
                                         'list_widget_ui': self.ui.list_sample,
                                         'folder': current_folder,
                                         'general_infos': None,
                                         'data': []},
                              'ob': {'title': 'Select folder or list of files',
                                     'list_widget_ui': self.ui.list_open_beam,
                                     'folder': current_folder,
                                     'general_infos': None,
                                     'data': []},
                              'normalized': {'title': 'Select folder or list of files',
                                             'folder': current_folder,
                                             'general_infos': None,
                                             'data': []},
                              'normalization': {'data': []},
                              'time_spectra': {'title': 'Select file',
                                               'folder': current_folder,
                                               'general_infos': None,
                                               'data': []}}
        
        self.data_files = {'sample': [],
                           'ob': [],
                           'normalized': [],
                           'time_spectra': []}

    #TAB 1, 2 and 3

    def tab_widget_changed(self, tab_selected):
        if tab_selected == 1: #normalization
            o_gui = Step2GuiHandler(parent = self)
            o_gui.update_widgets()

    def material_display_clicked(self, status):
        self.ui.material_display_checkbox_2.setChecked(status)
        o_gui = Step1GuiHandler(parent = self)
        o_gui.check_time_spectra_widgets()
        o_plot = Step1Plot(parent=self,)
        o_plot.display_general_bragg_edge()
            
    def material_display_2_clicked(self, status):
        self.ui.material_display_checkbox.setChecked(status)
        o_gui = Step1GuiHandler(parent = self)
        o_gui.check_time_spectra_widgets()
        o_plot = Step1Plot(parent=self,)
        o_plot.display_general_bragg_edge()

    def roi_image_view_changed(self):
        o_plot = Step1Plot(parent=self, data_type='sample')
        o_plot.display_bragg_edge()
    
    def roi_ob_image_view_changed(self):
        o_plot = Step1Plot(parent=self, data_type='ob')
        o_plot.display_bragg_edge()

    def retrieve_general_infos(self, data_type = 'sample'):
        o_general_infos = RetrieveGeneralFileInfos(parent = self, data_type = data_type)
        o_general_infos.update()
    
    def retrieve_selected_row_infos(self, data_type = 'sample'):
        if data_type == 'sample':
            self.sample_retrieve_selected_row_infos()
        elif data_type == 'ob':
            self.open_beam_retrieve_selected_row_infos()
        elif data_type == 'normalized':
            self.normalized_retrieve_selected_row_infos()

    def load_data_tab_changed(self, tab_index):
        o_gui = Step1GuiHandler(parent = self)
        o_gui.load_data_tab_changed(tab_index = tab_index)
        if tab_index == 0:
            self.current_data_type = 'sample'
            self.ui.image_preview.setCurrentIndex(0)
        else:
            self.current_data_type = 'ob'
            self.ui.image_preview.setCurrentIndex(1)

    def roi_editor_button(self):
        o_roi_editor = RoiEditor(parent = self)
        o_roi_editor.run()
        
    def refresh_roi(self, data_type='sample'):
        o_step1_plot = Step1Plot(parent = self, data_type=data_type)
        o_step1_plot.display_bragg_edge()

    def bragg_edge_selection_changed(self):
        o_gui = GuiHandler(parent = self)
        data_type = o_gui.get_active_tab()

        _ui_list = None
        if data_type == 'sample':
            _ui_list = self.ui.list_sample
        elif data_type == 'ob':
            _ui_list = self.ui.list_open_beam
        else:
            _ui_list = self.ui.list_normalized
            
        _ui_list.blockSignals(True)            
        o_bragg_selection = BraggEdgeSelectionHandler(parent=self, data_type=data_type)
        o_bragg_selection.update_dropdown()

        o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = data_type)
        o_retrieve_data_infos.update() 

        _ui_list.blockSignals(False)

    # Material widgets

    def list_of_element_index_changed(self, index):
        self.ui.list_of_elements_2.setCurrentIndex(index)
        o_gui = Step1GuiHandler(parent=self)
        o_gui.update_lattice_and_crystal_when_index_selected()
    
    def list_of_element_2_index_changed(self, index):
        self.ui.list_of_elements.setCurrentIndex(index)
        o_gui = Step1GuiHandler(parent=self)
        o_gui.update_lattice_and_crystal_when_index_selected()

    def crystal_structure_index_changed(self, index):
        self.ui.crystal_structure_2.setCurrentIndex(index)
        
    def crystal_structure_2_index_changed(self, index):
        self.ui.crystal_structure.setCurrentIndex(index)
        
    def lattice_text_changed(self):
        _contain = str(self.ui.lattice_parameter.text())
        self.ui.lattice_parameter_2.setText(_contain)
    
    def lattice_2_text_changed(self):
        _contain = str(self.ui.lattice_parameter_2.text())
        self.ui.lattice_parameter.setText(_contain)

    #TAB 1: Load Data Tab
    
    def sample_import_button_clicked(self):
        self.loading_flag = True
        o_load = DataHandler(parent = self)
        o_load.retrieve_files(data_type = 'sample')
        if not o_load.user_canceled:
            self.select_load_data_row(data_type = 'sample', row = 0)
            self.retrieve_general_infos(data_type = 'sample')
            self.retrieve_selected_row_infos(data_type = 'sample')
            o_plot = Step1Plot(parent=self, data_type='sample')
            o_plot.display_bragg_edge()
            o_gui = Step1GuiHandler(parent = self)
            o_gui.check_time_spectra_widgets()

    def select_load_data_row(self, data_type='sample', row=0):
        o_gui = Step1GuiHandler(parent=self)
        o_gui.select_load_data_row(data_type=data_type,
                                   row=row)
                                                           
    def sample_retrieve_selected_row_infos(self):
        o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = 'sample')
        o_retrieve_data_infos.update()

    def open_beam_retrieve_selected_row_infos(self):
        o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = 'ob')
        o_retrieve_data_infos.update()

    def sample_list_selection_changed(self):
        if not self.loading_flag:
            o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = 'sample')
            o_retrieve_data_infos.update() 
            self.roi_image_view_changed()
        else:
            self.loading_flag = False

    def sample_list_right_click(self, position):
        o_list_handler = ListDataHandler(parent = self)
        o_list_handler.right_click(position = position)

    def open_beam_import_button_clicked(self):
        self.loading_flag = True
        o_load = DataHandler(parent = self)
        o_load.retrieve_files(data_type = 'ob')
        if not o_load.user_canceled:
            self.select_load_data_row(data_type = 'ob', row = 0)
            self.retrieve_general_infos(data_type = 'ob')
            self.retrieve_selected_row_infos(data_type = 'ob')
            o_plot = Step1Plot(parent=self, data_type='ob')
            o_plot.display_bragg_edge()

    def open_beam_list_selection_changed(self):
        if not self.loading_flag:
            o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = 'ob')
            o_retrieve_data_infos.update()
            self.roi_ob_image_view_changed()
        else:
            self.loading_flag = False

    def time_spectra_import_button_clicked(self):
        o_load = DataHandler(parent = self)
        o_load.retrieve_time_spectra(auto_load = False)
        o_gui = Step1GuiHandler(parent = self)
        o_gui.check_time_spectra_widgets()

    def time_spectra_preview_button_clicked(self):
        o_time_spectra = TimeSpectraHandler(parent = self)
        o_time_spectra.display()
                        
    def update_delta_lambda(self):
        o_gui = Step1GuiHandler(parent = self)
        o_gui.update_delta_lambda()

    def roi_algorithm_is_add_clicked(self):
        self.ui.ob_roi_add_button.setChecked(True)
        self.ui.normalized_roi_add_button.setChecked(True)
        self.roi_image_view_changed()
    
    def roi_algorithm_is_mean_clicked(self):
        self.ui.ob_roi_mean_button.setChecked(True)
        self.ui.normalized_roi_mean_button.setChecked(True)
        self.roi_image_view_changed()

    def ob_roi_algorithm_is_add_clicked(self):
        self.ui.roi_add_button.setChecked(True)
        self.ui.normalized_roi_add_button.setChecked(True)
        self.roi_ob_image_view_changed()
        
    def ob_roi_algorithm_is_mean_clicked(self):
        self.ui.roi_mean_button.setChecked(True)
        self.ui.normalized_roi_mean_button.setChecked(True)
        self.roi_ob_image_view_changed()
    
    #TAB 2: 
    
    def normalization_manual_roi_changed(self):
        o_roi = Step2RoiHandler(parent = self)
        o_roi.save_roi()
        o_plot = Step2Plot(parent = self)
        o_plot.update_roi_table()
        o_plot.display_counts_vs_file()
    
    def normalization_row_status_changed(self):
        o_roi = Step2RoiHandler(parent = self)
        o_roi.save_table()
        o_roi.enable_selected_roi()
        o_plot = Step2Plot(parent = self)
        o_plot.display_counts_vs_file()
    
    def normalization_remove_roi_button_clicked(self):
        self.ui.normalization_tableWidget.blockSignals(True)
        o_roi = Step2RoiHandler(parent = self)
        o_roi.remove_roi()    
        o_plot = Step2Plot(parent = self)
        o_plot.display_counts_vs_file()
        o_plot.display_roi()
        self.ui.normalization_tableWidget.blockSignals(False)

    def normalization_add_roi_button_clicked(self):
        self.ui.normalization_tableWidget.blockSignals(True)
        o_roi = Step2RoiHandler(parent = self)
        o_roi.add_roi()
        self.ui.normalization_tableWidget.blockSignals(False)
    
    def run_ob_normalization(self):
        print("run ob normalization")

    def scaling_coefficient_validated(self):
        print("run scaling coefficient validated")

    def normalization_button_clicked(self):
        pass
    

    
    
    def normalization_tableWidget_cell_changed(self, row, col):
        o_roi = Step2RoiHandler(parent = self)
        o_roi.save_table()
        o_plot = Step2Plot(parent = self)
        o_plot.display_counts_vs_file()
        o_plot.display_roi()

    #TAB 3: Normalized Data Tab
    
    def normalized_import_button_clicked(self):
        self.loading_flag = True
        o_load = DataHandler(parent = self)
        o_load.retrieve_files(data_type = 'normalized')
        if not o_load.user_canceled:
            self.select_normalized_row(row = 0)
            self.retrieve_general_infos(data_type = 'normalized')
            self.retrieve_selected_row_infos(data_type = 'normalized')
            o_plot = Step1Plot(parent=self, data_type='normalized')
            o_plot.display_bragg_edge()
    
    def normalized_retrieve_selected_row_infos(self):
        o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = 'normalized')
        o_retrieve_data_infos.update()

    def select_normalized_row(self, row=0):
        o_gui = Step3GuiHandler(parent=self)
        o_gui.select_normalized_row(row=row)

    def normalized_list_selection_changed(self):
        if not self.loading_flag:
            o_retrieve_data_infos = RetrieveSelectedFileDataInfos(parent = self, data_type = 'normalized')
            o_retrieve_data_infos.update()  
            self.roi_normalized_image_view_changed()
        else:
            self.loading_flag = False
    
    def roi_normalized_image_view_changed(self):
        o_plot = Step1Plot(parent=self, data_type='normalized')
        o_plot.display_bragg_edge()
    
    def normalized_roi_algorithm_is_add_clicked(self):
        self.ui.roi_add_button.setChecked(True)
        self.ui.ob_roi_add_button.setChecked(True)
        self.roi_normalized_image_view_changed()
    
    def normalized_roi_algorithm_is_mean_clicked(self):
        self.ui.roi_mean_button.setChecked(True)
        self.ui.ob_roi_mean_button.setChecked(True)
        self.roi_normalized_image_view_changed()


def main():
    app = QApplication(sys.argv)
    #app.setWindowIcon(PyQt4.QtGui.QIcon(":/icon.png"))
    application = MainWindow()
    application.show()
    app.exec_()

if __name__ == '__main__':
    main()
