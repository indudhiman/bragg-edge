#!/usr/bin/env python

import sys
import os

import PyQt4
import PyQt4.QtCore as QtCore
import PyQt4.QtGui as QtGui

import ibeatles.interfaces.ui_mainWindow

from ibeatles.step1.data_handler import DataHandler
from ibeatles.step1.gui_handler import Step1GuiHandler

from ibeatles.utilities.retrieve_infos import RetrieveDisplayFileInfos, RetrieveGeneralFileInfos
from ibeatles.utilities.list_data_handler import ListDataHandler


class MainWindow(PyQt4.QtGui.QMainWindow, ibeatles.interfaces.ui_mainWindow.Ui_MainWindow):
    """ Main FastGR window
    """

    DEBUGGING = True

    def __init__(self):
        """ Initialization
        Parameters
        ----------
        """
        # Base class
        QtGui.QMainWindow.__init__(self)

        # Initialize the UI widgets
        self.ui = ibeatles.interfaces.ui_mainWindow.Ui_MainWindow()
        self.ui.setupUi(self)

        self.setup()
        self.init_interface()
        
    def init_interface(self):
        o_gui = Step1GuiHandler(parent=self)
        o_gui.init_gui()
        
    def setup(self):
        if self.DEBUGGING:
            current_folder = '/Volumes/My Book Thunderbolt Duo/iBeatles/test_data/'
        else:
            current_folder = os.getcwd()

        self.sample_folder = current_folder
        self.ob_folder = current_folder
        self.normalized_folder = current_folder
        self.time_spectra_folder = current_folder
    
        self.data_metadata = {'sample': {'title': "Select folder or list of files",
                                         'folder': current_folder,
                                         'general_infos': None},
                              'ob': {'title': 'Select folder or list of files',
                                     'folder': current_folder,
                                     'general_infos': None},
                              'normalized': {'title': 'Select folder or list of files',
                                             'folder': current_folder,
                                             'general_infos': None},
                              'time_spectra': {'title': 'Select file',
                                               'folder': current_folder,
                                               'general_infos': None}}
        
        self.data_files = {'sample': [],
                           'ob': [],
                           'normalized': [],
                           'time_spectra': []}


    #TAB 1: Load Data Tab
    
    def sample_import_button_clicked(self):
        o_load = DataHandler(parent = self)
        o_load.retrieve_files(data_type = 'sample')
        if not o_load.user_canceled:
            self.select_load_data_row(data_type = 'sample', row = 0)
            self.retrieve_general_infos(data_type = 'sample')
            self.populate_infos_all_files(data_type = 'sample')

    def select_load_data_row(self, data_type='sample', row=0):
        o_gui = Step1GuiHandler(parent=self)
        o_gui.select_load_data_row(data_type=data_type,
                                   row=row)
                                               
    def populate_infos_all_files(self, data_type = 'sample'):
        if data_type == 'sample':
            self.sample_populate_infos_all_files()
            #self.sample_list_selection_changed()
        elif data_type == 'ob':
            self.open_beam_populate_infos_all_files()
            #self.open_beam_list_selection_changed()
            
    def sample_populate_infos_all_files(self):
        o_retrieve_infos = RetrieveDisplayFileInfos(parent = self, data_type = 'sample')
        o_retrieve_infos.update()

    def open_beam_populate_infos_all_files(self):
        o_retrieve_infos = RetrieveDisplayFileInfos(parent = self, data_type = 'ob')
        o_retrieve_infos.update()        

    def sample_list_selection_changed(self):
        pass

    def sample_list_right_click(self, position):
        o_list_handler = ListDataHandler(parent = self)
        o_list_handler.right_click(position = position)

    def open_beam_import_button_clicked(self):
        o_load = DataHandler(parent = self)
        o_load.retrieve_files(data_type = 'ob')
        if not o_load.user_canceled:
            self.select_load_data_row(data_type = 'ob', row = 0)
            self.retrieve_general_infos(data_type = 'ob')
            self.populate_infos_all_files(data_type = 'ob')

    def open_beam_list_selection_changed(self):
        pass

    def time_spectra_import_button_clicked(self):
        o_load = DataHandler(parent = self)
        o_load.retrieve_time_spectra(auto_load = False)

    def time_spectra_preview_button_clicked(self):
        print("time spectra button clicked")
        
    def retrieve_general_infos(self, data_type = 'sample'):
        o_general_infos = RetrieveGeneralFileInfos(parent = self, data_type = data_type)
        o_general_infos.update()
        
    def load_data_tab_changed(self, tab_index):
        o_gui = Step1GuiHandler(parent = self)
        o_gui.load_data_tab_changed(tab_index = tab_index)
    
    


def main():
    app = PyQt4.QtGui.QApplication(sys.argv)
    #app.setWindowIcon(PyQt4.QtGui.QIcon(":/icon.png"))
    application = MainWindow()
    application.show()
    app.exec_()

if __name__ == '__main__':
    main()
